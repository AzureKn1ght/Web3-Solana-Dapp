{"version":3,"sources":["App.js","index.js"],"names":["SystemProgram","Keypair","Transaction","web3","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","walletAddress","setWalletAddress","useState","inputValue","setInputValue","gifList","setGifList","connectWallet","async","solana","window","response","connect","console","log","publicKey","toString","onInputChange","event","value","target","getProvider","connection","Connection","Provider","createGifAccount","provider","program","Program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","error","transferSOL","confirm","phantom","isPhantom","open","getPhantomProvider","blockhash","getLatestBlockhash","receipient","userAddress","sender","recieverWallet","transaction","instruction","transfer","fromPubkey","toPubkey","lamports","LAMPORTS_PER_SOL","add","recentBlockhash","feePayer","signature","signAndSendTransaction","getSignatureStatus","alert","account","fetch","useEffect","onLoad","onlyIfTrusted","checkIfWalletIsConnected","addEventListener","removeEventListener","className","Style","frameborder","height","width","src","title","onClick","onSubmit","preventDefault","length","addGif","sendGif","type","placeholder","onChange","map","item","index","gifLink","alt","id","bind","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.985f02c7.chunk.js","sourcesContent":["import { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport React, { useEffect, useState } from \"react\";\nimport kp from \"./keypair.json\";\nimport idl from \"./idl.json\";\nimport \"./App.css\";\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair, Transaction } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = Keypair.fromSecretKey(secret);\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl(\"devnet\");\n\n// Controls how long we want to wait to confirm when a transaction is \"done\".\n// Here we wait for it to be confirmed by the node we're connected to\n// Can use \"finalized\" if we want to be extra sure full confirmation\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\n// Constants\nconst TWITTER_HANDLE = \"AzureKn1ght\";\nconst TWITTER_LINK = `https://github.com/AzureKn1ght`;\n// const TEST_GIFS = [\n//   \"https://media.giphy.com/media/O8GyWTlBlAmKhpMIMq/giphy.gif\",\n//   \"https://media.giphy.com/media/SwEfs4Lchv8o5WVYG2/giphy.gif\",\n//   \"https://media.giphy.com/media/iNwDIhUl9S6j42lJz7/giphy.gif\",\n//   \"https://media.giphy.com/media/uWW9mp7jKEpVUyYcAQ/giphy.gif\",\n// ];\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\");\n      return;\n    }\n    setInputValue(\"\");\n    console.log(\"Gif link:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue);\n\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const getPhantomProvider = () => {\n    if (\"phantom\" in window) {\n      const provider = window.phantom?.solana;\n      if (provider?.isPhantom) {\n        return provider;\n      }\n    }\n    window.open(\"https://phantom.app/\", \"_blank\");\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createGifAccount}\n          >\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    }\n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return (\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, \n            the src is now item.gifLink */}\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} alt=\"gif\" />\n                <div\n                  className=\"tip\"\n                  id={item.userAddress.toString()}\n                  onClick={transferSOL.bind(this, item)}\n                >\n                  ðŸ’° {item.userAddress.toString()}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  const transferSOL = async (receipient) => {\n    if (!window.confirm(\"Tip submitter for 0.01 SOL?\")) return;\n    try {\n      // Establishing connection\n      const provider = getPhantomProvider();\n      const connection = new Connection(network, opts.preflightCommitment);\n      let blockhash = await (await connection.getLatestBlockhash()).blockhash;\n      console.log(\"recentBlockhash: \", blockhash);\n\n      // Get recipient wallet address\n      receipient = receipient.userAddress.toString();\n      console.log(receipient);\n\n      // Get the phantom wallet of the user\n      const sender = provider.publicKey.toString();\n      console.log(\"Public key of the emitter: \", sender);\n\n      // Receipiet wallet public key address\n      const recieverWallet = new web3.PublicKey(receipient);\n\n      // Build the transaction\n      let transaction = new Transaction();\n      const instruction = SystemProgram.transfer({\n        fromPubkey: provider.publicKey,\n        toPubkey: recieverWallet,\n        lamports: web3.LAMPORTS_PER_SOL / 100,\n        //Sending 0.01 SOL. Remember 1 Lamport = 10^-9 SOL.\n      });\n      transaction.add(instruction);\n      transaction.recentBlockhash = blockhash;\n      transaction.feePayer = provider.publicKey;\n\n      console.log(\"Transaction sent: \", transaction);\n      const { signature } = await provider.signAndSendTransaction(transaction);\n      await connection.getSignatureStatus(signature);\n\n      // Display the transaction signature\n      console.log(\"Signature: \", signature);\n      alert(\"Tip sent successfully! :)\");\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n  };\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n      // Call Solana program here.\n\n      // Set state\n      getGifList();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      {/* This was solely added for some styling fanciness */}\n      <div Style=\"position: fixed; z-index: 0; width: 100%; height: 100%; top: -50%; left: -50%; pointer-events: none;\">\n        <iframe\n          frameborder=\"0\"\n          height=\"200%\"\n          width=\"200%\"\n          src=\"https://www.youtube-nocookie.com/embed/nq4tT68UoCg?autoplay=1&loop=1&controls=0&showinfo=0&modestbranding=1&mute=1&disablekb=1&start=60\"\n          title=\"youtube\"\n        ></iframe>\n      </div>\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">K-Pop GIF Portal</p>\n          <p className=\"sub-text\">\n            âœ¨ View k-pop GIF collections in the Solana metaverse âœ¨\n          </p>\n          {/* Add the condition to show this only if we don't have a wallet address */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`Built with â™¥ by ${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}